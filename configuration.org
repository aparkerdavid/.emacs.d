* Default settings for frame appearance
#+BEGIN_SRC emacs-lisp

  (setq default-frame-alist
        '((width . 100)
          (height . 40)
          (font . "Iosevka-14")))
  (setq-default line-spacing 0.125)
  (setq-default frame-resize-pixelwise t)
  (setq mouse-wheel-scroll-amount '(1 ((shift) . 1) ((control) . nil)))
  (setq mouse-wheel-progressive-speed nil)
  (add-to-list 'default-frame-alist '(vertical-scroll-bars . nil))
  (add-to-list 'default-frame-alist '(ns-transparent-titlebar . t))
  (tool-bar-mode -1)
  (menu-bar-mode -1)
  (blink-cursor-mode 0)

#+END_SRC

* Setup straight.el
#+BEGIN_SRC emacs-lisp
  (defvar bootstrap-version)
  (let ((bootstrap-file
         (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
        (bootstrap-version 5))
    (unless (file-exists-p bootstrap-file)
      (with-current-buffer
          (url-retrieve-synchronously
           "https://raw.githubusercontent.com/raxod502/straight.el/develop/install.el"
           'silent 'inhibit-cookies)
        (goto-char (point-max))
        (eval-print-last-sexp)))
    (load bootstrap-file nil 'nomessage))
    (setq-default straight-vc-git-default-protocol 'ssh)
#+END_SRC



* Start Server
#+begin_src emacs-lisp
  (server-start)
#+end_src

* Packages
** Hook up use-package to straight.el
#+BEGIN_SRC emacs-lisp
  (straight-use-package 'use-package)
  (setq straight-use-package-by-default t)
  (setq use-package-always-ensure t)
#+END_SRC

** General

*** Fix shell path on Mac

#+begin_src emacs-lisp
  (use-package exec-path-from-shell
    :init (when (memq window-system '(mac ns x))
    (exec-path-from-shell-initialize)))
#+end_src

*** Org mode
#+begin_src emacs-lisp
  (use-package org
    :hook
    (org-mode . org-indent-mode)
    :custom
    (org-src-fontify-natively t)
    (org-cycle-separator-lines -1)
    (org-src-window-setup 'current-window)
    (org-startup-folded 'nofold))
#+end_src

*** Rainbow
#+begin_src emacs-lisp
  (use-package rainbow-mode)
#+end_src

*** Fuzzy finding & Search
#+begin_src emacs-lisp
  (use-package flx)

  (use-package avy)

  (use-package counsel
    :after (flx avy)
    :init (ivy-mode 1)
    :bind (("C-x b" . counsel-buffer-or-recentf)
           ("C-x C-b" . switch-to-buffer)
           :map
           ivy-minibuffer-map
           ("<escape>" . minibuffer-keyboard-quit))
    :custom
    (ivy-use-virtual-buffers 'nil)
    (ivy-count-format "(%d/%d) "))

  (use-package swiper 
    :custom (ivy-re-builders-alist '((swiper-isearch . ivy--regex-plus) (t . ivy--regex-fuzzy)))
    :bind (:map swiper-map
           ("<tab>" . swiper-avy)
           ("M-l" . swiper-mc)
           ("<escape>" . minibuffer-keyboard-quit)))

  (substitute-key-definition 'isearch-forward 'swiper-isearch global-map)
#+end_src

*** Flycheck
#+begin_src emacs-lisp
(use-package flycheck)
#+end_src
 
*** Note organization & Zettelkasten
#+begin_src emacs-lisp
(use-package deft
  :custom
    (deft-extensions '("org" "md" "txt"))
    (deft-default-extension "org")
    (deft-directory "~/notes")
    (deft-use-filename-as-title t))

(use-package zetteldeft

  :after (deft avy)
  :config (zetteldeft-set-classic-keybindings))
#+end_src
 
*** Magit
#+begin_src emacs-lisp
(use-package magit
  :config
  (add-hook 'after-save-hook 'magit-after-save-refresh-status t)
  (global-set-key (kbd "C-c g") 'magit-status))
#+end_src

*** Projectile
#+begin_src emacs-lisp
  (use-package projectile
    :after (ivy)
    :custom (projectile-completion-system 'ivy)
    :config
    (projectile-mode +1)
    (define-key projectile-mode-map (kbd "C-c p") 'projectile-command-map))
#+end_src

*** Hydra
#+begin_src emacs-lisp
(use-package hydra)
#+end_src

*** Surround
#+begin_src emacs-lisp
(use-package emacs-surround
:straight (emacs-surround :type git :host github :repo "ganmacs/emacs-surround")
:bind ("C-q" . 'emacs-surround))
#+end_src

*** Multicursors
#+begin_src emacs-lisp
  (use-package multiple-cursors
    :bind (("M-l" . mc/edit-lines)))

  (use-package mc-extras)
#+end_src

*** Code Formatting
#+begin_src emacs-lisp
  (use-package format-all
    :bind ("C-c =" . format-all-buffer))
#+end_src

*** Paredit
 #+begin_src emacs-lisp
 (use-package paredit)
 #+end_src

*** Dired
#+begin_src emacs-lisp
  (use-package dired
    :straight nil
    :ensure nil
    :hook
    (dired-mode . dired-hide-details-mode)
    (dired-mode . auto-revert-mode)
    :bind (("s-\\" . (lambda () (interactive) (dired ".")))
           :map
           dired-mode-map
           ("s" . swiper-isearch)
           ("f" . dired-find-alternate-file)
           ("b" . (lambda () (interactive) (find-alternate-file "..")))))
#+end_src
*** God mode
#+begin_src emacs-lisp
  (defun god-update-cursor ()
      (setq cursor-type (if (or god-local-mode buffer-read-only)
                            'box
                          'bar)))

  (use-package god-mode
    :bind
    (("<escape>" . god-local-mode)
     :map god-local-mode-map
     ("i" . (lambda () (interactive)
      (if (use-region-p)
          (progn
            (call-interactively 'kill-region)
            (call-interactively 'god-local-mode 0))
        (call-interactively 'god-local-mode 0))))
     ("<escape>" . keyboard-quit))
    :hook
    (god-mode-enabled . god-update-cursor)
    (god-mode-disabled . god-update-cursor)
    :init (god-mode-all)
    :custom (god-exempt-major-modes '(vterm-mode vterm-copy-mode dired-mode magit-mode))
    )


#+end_src

*** Rainbow brackets
#+begin_src emacs-lisp
(use-package rainbow-delimiters
  :config
  (add-hook 'prog-mode-hook 'rainbow-delimiters-mode))
#+end_src

*** LSP
#+begin_src emacs-lisp
(use-package lsp-mode)
#+end_src

*** Completion
#+begin_src emacs-lisp
(use-package company
  :config
  (add-hook 'after-init-hook 'global-company-mode))
#+end_src

*** Smartparens
#+begin_src emacs-lisp
    (use-package smartparens
      :config
      (require 'smartparens-config)
    
      ;; Smart indentation between bracket pairs, taken from:
      ;; http://xenodium.com/emacs-smartparens-auto-indent/
      (sp-local-pair 'prog-mode "{" nil :post-handlers '((indent-between-pair "RET")))
      (sp-local-pair 'prog-mode "[" nil :post-handlers '((indent-between-pair "RET")))(sp-local-pair 'prog-mode "(" nil :post-handlers '((indent-between-pair "RET")))
      (sp-local-pair 'prog-mode "(" nil :post-handlers '((indent-between-pair "RET")))
      :hook
      (prog-mode . smartparens-mode)
      (lisp-mode . smartparens-strict-mode))

    (defun indent-between-pair (&rest _ignored)
      (newline)
      (indent-according-to-mode)
      (forward-line -1)
      (indent-according-to-mode))


#+end_src

*** Expand selection
#+begin_src emacs-lisp
(use-package expand-region)
#+end_src

*** Terminal Emulator
#+begin_src emacs-lisp
  (use-package vterm
    :load-path "~/.emacs.d/emacs-libvterm"
    :custom (vterm-kill-buffer-on-exit t)
    :bind (:map
           vterm-mode-map
           ("s-<escape>" . (lambda () (interactive) (progn (vterm-copy-mode) (god-local-mode))))
           :map
           vterm-copy-mode-map
           ("i" . (lambda () (interactive) (progn (vterm-copy-mode -1) (god-local-mode -1))))
           ("s-<escape>" . (lambda () (interactive) (progn (vterm-copy-mode -1) (god-local-mode -1))))))
#+end_src

*** Theme
#+BEGIN_SRC emacs-lisp
  (use-package less-light-theme
    :straight (less-light-theme :type git :host github :repo "aparkerdavid/less-light-theme")
    :config (load-theme 'less-light t))

#+end_src


** Languages

*** Web 
#+begin_src emacs-lisp
  (use-package web-mode
    :config
    (add-to-list 'auto-mode-alist '("\\.php\\'" . web-mode))
    (add-to-list 'auto-mode-alist '("\\.html\\'" . web-mode))
    (add-to-list 'auto-mode-alist '("\\.css\\'" . web-mode))
    (add-to-list 'auto-mode-alist '("\\.svelte\\'" . web-mode)))
#+end_src

*** Emmet
#+begin_src emacs-lisp
  (use-package emmet-mode
    :hook
    (web-mode . emmet-mode))
#+end_src
*** Javascript/Typescript
 #+begin_src emacs-lisp
 (use-package tide
   :after (tide company)
   :config
   (defun setup-tide-mode ()
     "Setup function for tide."
     (interactive)
     (tide-setup)
     (flycheck-mode +1)
     (setq flycheck-check-syntax-automatically '(save mode-enabled))
     (eldoc-mode +1)
     (tide-hl-identifier-mode +1)
     (company-mode +1))

   (setq company-tooltip-align-annotations t)

   (add-hook 'js-mode-hook #'setup-tide-mode))
 #+end_src
*** Clojure
#+begin_src emacs-lisp
  (use-package clojure-mode)

  (use-package cider)
#+end_src
* Custom
** Functions 
 #+begin_src emacs-lisp
   (defun newline-below ()
     "Newline below current"
        (interactive)
       (save-excursion
         (call-interactively 'move-end-of-line)
         (newline)))
 #+end_src

#+begin_src emacs-lisp
  (defun newline-above ()
    "Newline above current"
    (interactive)
      (save-excursion
      (call-interactively 'move-beginning-of-line)
      (newline)))
#+end_src

   #+begin_src emacs-lisp
   (defun insert-above ()
	  (interactive)
	  (progn
	    (call-interactively 'move-beginning-of-line)
	    (newline)
	    (call-interactively 'previous-line)
	    (call-interactively 'god-local-mode 0)))
   #+end_src

   #+begin_src emacs-lisp
   (defun insert-below ()
     (interactive)
     (progn
       (call-interactively 'move-end-of-line)
       (newline)
       (call-interactively 'god-local-mode 0)))
   #+end_src

   #+begin_src emacs-lisp
   (defun wrath ()
     "cut the current region and leave god mode; cf 'c' in vim"
     (interactive)
     (if
	 (use-region-p)
	  (progn
	    (call-interactively 'kill-region)
	    (call-interactively 'god-local-mode 0))
       (call-interactively 'god-local-mode 0)))
   #+end_src

   #+begin_src emacs-lisp
   (defun mark-toggle ()
     "toggle the mark; cf visual mode in vim"
     (interactive)
     (if (region-active-p)
	 (deactivate-mark)
       (call-interactively 'set-mark-command)))
   #+end_src

   #+begin_src emacs-lisp
   (defun comment-toggle ()
     "toggle comment status on one or more lines."
     (interactive)
     (if (use-region-p)
	 (call-interactively 'comment-line)
       (if (= (line-beginning-position) (line-end-position))
	   (call-interactively 'comment-dwim)
	   (comment-or-uncomment-region (line-beginning-position) (line-end-position)))))
   #+end_src

   #+begin_src emacs-lisp
   (defun line-beginning-smart ()
     "go to the beginning of the line; if already there, go to the first nonwhitespace character."
     (interactive)
     (if (= 0 (current-column))
	 (call-interactively 'back-to-indentation)
       (call-interactively 'move-beginning-of-line)))
   #+end_src

   #+begin_src emacs-lisp
   (defun kill-region-smart ()
     (interactive)
     (if (use-region-p)
	 (call-interactively 'kill-region)
       (call-interactively 'delete-char)))
   #+end_src

   #+begin_src emacs-lisp
   (defun select-line () 
   "select the current line"
     (interactive)
     (if (use-region-p)
	 (call-interactively 'move-end-of-line)
       (progn
	 (call-interactively 'move-beginning-of-line)
	 (call-interactively 'set-mark-command)
	 (call-interactively 'move-end-of-line))))
   #+end_src
** Keybindings

* Edit config with standard macOS keybinding
#+begin_src emacs-lisp
  (bind-key "s-," (lambda () (interactive) (find-file "~/.emacs.d/configuration.org")))
#+end_src
#+BEGIN_SRC emacs-lisp

  (global-set-key (kbd "s-V") #'counsel-yank-pop)
  (define-key minibuffer-local-map [escape] 'minibuffer-keyboard-quit)
  (define-key minibuffer-local-ns-map [escape] 'minibuffer-keyboard-quit)
  (define-key minibuffer-local-completion-map [escape] 'minibuffer-keyboard-quit)
  (define-key minibuffer-local-must-match-map [escape] 'minibuffer-keyboard-quit)
  (define-key minibuffer-local-isearch-map [escape] 'minibuffer-keyboard-quit)

  ;; Emacs-like navigation for god-mode
  ;; (global-set-key (kbd "C-f") #'forward-word)
  ;; (global-set-key (kbd "M-f") #'forward-char)
  ;; (global-set-key (kbd "C-b") #'backward-word)
  ;; (global-set-key (kbd "M-b") #'backward-char)
  ;; (global-set-key (kbd "C-e") #'end-of-line)

  (define-key visual-line-mode-map [remap next-line] #'next-logical-line)
  (define-key visual-line-mode-map [remap previous-line] #'previous-logical-line)
  (global-set-key [remap set-mark-command] #'mark-toggle)

  (global-set-key (kbd "C-k") #'select-line)

  ;; vim-like navigation for god-mode
  ;; (define-key god-local-mode-map (kbd "h") #'backward-word)
  ;; (define-key god-local-mode-map (kbd "H") #'backward-char)
  ;; (define-key god-local-mode-map (kbd "j") #'next-line)
  ;; (define-key god-local-mode-map (kbd "k") #'previous-line)
  ;; (define-key god-local-mode-map (kbd "l") #'forward-word)
  ;; (define-key god-local-mode-map (kbd "L") #'forward-char)
  ;; (define-key god-local-mode-map (kbd "i") #'wrath)
  ;; (define-key god-local-mode-map (kbd "C-S-i") (lambda () (interactive) (god-local-mode 0)))
  ;; (define-key god-local-mode-map (kbd "m") #'mark-toggle)
  ;; (define-key god-local-mode-map (kbd "o") #'insert-below)
  ;; (define-key god-local-mode-map (kbd "C-S-o") #'insert-above)

  ;; (define-key god-local-mode-map (kbd "[") #'newline-above)
  ;; (define-key god-local-mode-map (kbd "]") #'newline-below)
  (global-set-key [remap move-beginning-of-line] #'line-beginning-smart)
  ;; (global-set-key (kbd "C-d") #'kill-region-smart)
  (define-key paredit-mode-map (kbd "C-d") #'smart-kill-region)
  (define-key paredit-mode-map [remap kill-region] #'paredit-kill-region)
  ;; (global-set-key (kbd "M-SPC")
  ;; 		(defhydra utility-hydra (:pre (god-local-mode 0)
  ;; 				:post (god-local-mode 1))
  ;; 		  "Utility Hydra"
  ;; 		  ("h" windmove-left "window left")
  ;; 		  ("j" windmove-down "window down")
  ;; 		  ("k" windmove-up "window up")
  ;; 		  ("l" windmove-right "window right")
  ;; 		  ("H" split-window-horizontally "split window horizontally")
  ;; 		  ("J" split-window-vertically "split window vertically")
  ;; 		  ("d" delete-window "delete window")
  ;; 		  ("r" ranger "ranger" :color blue)
  ;; 		  ("C" (find-file user-init-file) "Edit init file" :color blue)
  ;; 		  ("Q" kill-emacs "kill emacs")
  ;; 		  ("<escape>" nil "quit")
  ;; 		  ))
  ;; (global-set-key (kbd "M-SPC")
  ;;                 (defhydra utility-hydra (:pre (god-local-mode 0)
  ;;                                 :post (god-local-mode 1))
  ;;                   "Utility Hydra"
  ;;                   ("b" windmove-left "window left")
  ;;                   ("n" windmove-down "window down")
  ;;                   ("p" windmove-up "window up")
  ;;                   ("f" windmove-right "window right")
  ;;                   ("F" split-window-horizontally "split window horizontally")
  ;;                   ("N" split-window-vertically "split window vertically")
  ;;                   ("d" delete-window "delete window")
  ;;                   ("r" ranger "ranger" :color blue)
  ;;                   ;; ("g" magit-status "magit status" :color blue)
  ;;                   ("!" eshell "eshell" :color blue)
  ;;                   ("C" (find-file "~/.emacs.d/configuration.org") "Edit init file" :color blue)
  ;;                   ("Q" kill-emacs "kill emacs")
  ;;                   ("<escape>" nil "quit")))



  (defhydra barf-hydra ()
           ("f" sp-forward-barf-sexp "barf forward" :color blue)
           ("b" sp-backward-barf-sexp "barf backward" :color blue))


  (defhydra slurp-hydra ()
           ("f" sp-forward-slurp-sexp "slurp forward" :color blue)
           ("b" sp-backward-slurp-sexp "slurp backward" :color blue))


  (defhydra sp-hydra (:pre (god-local-mode 0)
                           :post (god-local-mode 1))
    ("b" barf-hydra/body "barf" :color blue)
    ("s" slurp-hydra/body "slurp" :color blue)
    ("m" sp-mark-sexp "mark sexp" :color blue))


  (define-key smartparens-mode-map (kbd "C-c n") #'sp-hydra/body)

  (global-set-key (kbd "C-w") #'er/expand-region)
  ;; (global-set-key (kbd "C-y") #'kill-ring-save)
  ;; (global-set-key (kbd "C-v") #'yank)
  ;; (global-set-key (kbd "C-;") #'avy-goto-char-timer)
  ;; (global-set-key (kbd "C-:") #'avy-goto-line)

  ;; Better commenting function
  (global-set-key (kbd "C-x C-;") #'comment-toggle)

#+END_SRC
