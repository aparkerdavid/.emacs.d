#+PROPERTY: header-args emacs-lisp

* Default settings for frame appearance
#+BEGIN_SRC emacs-lisp

(setq initial-frame-alist
      '((width . 100)
        (height . 40)))
(setq-default line-spacing 0.125)
(setq mouse-wheel-scroll-amount '(1 ((shift) . 1) ((control) . nil)))
(setq mouse-wheel-progressive-speed nil)
(add-to-list 'default-frame-alist '(vertical-scroll-bars . nil))
(tool-bar-mode -1)
(menu-bar-mode -1)
#+END_SRC

* Bootstrap straight.el
#+BEGIN_SRC emacs-lisp
(defvar bootstrap-version)
(let ((bootstrap-file
       (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
      (bootstrap-version 5))
  (unless (file-exists-p bootstrap-file)
    (with-current-buffer
        (url-retrieve-synchronously
         "https://raw.githubusercontent.com/raxod502/straight.el/develop/install.el"
         'silent 'inhibit-cookies)
      (goto-char (point-max))
      (eval-print-last-sexp)))
  (load bootstrap-file nil 'nomessage))
#+END_SRC

* Packages
** Hook up use-package to straight.el
#+BEGIN_SRC emacs-lisp
(straight-use-package 'use-package)
(setq straight-use-package-by-default t)
#+END_SRC

** General

*** Org mode
#+begin_src emacs-lisp
(use-package org
  :init
  (add-hook 'org-mode-hook #'org-indent-mode)
  :config
  (setq org-src-fontify-natively t))
#+end_src

*** Fuzzy finding & Search
#+begin_src emacs-lisp

(use-package flx
  :ensure t)

(use-package counsel
  :ensure t
  :after (flx)
  :init (ivy-mode 1)
  :custom (ivy-re-builders-alist '((swiper . ivy--regex-plus) (t . ivy--regex-fuzzy)))
  :bind (("C-s" . swiper)))
#+end_src

*** Flycheck
#+begin_src emacs-lisp
(use-package flycheck
  :ensure t)
#+end_src

*** Jump search
#+begin_src emacs-lisp
(use-package avy
  :ensure t)
#+end_src

*** Note organization
#+begin_src emacs-lisp
(use-package deft
  :ensure t
  :custom
    (deft-extensions '("org" "md" "txt"))
    (deft-default-extension "org")
    (deft-directory "~/notes")
    (deft-use-filename-as-title t))
#+end_src

*** Zettelkasten
#+begin_src emacs-lisp
(use-package zetteldeft
  :ensure t
  :after (deft avy)
  :config (zetteldeft-set-classic-keybindings))
#+end_src

*** Magit
#+begin_src emacs-lisp
(use-package magit
  :ensure t
  :config
  (add-hook 'after-save-hook 'magit-after-save-refresh-status t)
  (global-set-key (kbd "C-c g") 'magit-status))
#+end_src

*** Projectile
#+begin_src emacs-lisp
(use-package projectile
  :ensure t
  :after (ivy)
  :custom (projectile-completion-system 'ivy)
  :config
  (projectile-mode +1)
  (define-key projectile-mode-map (kbd "C-c p") 'projectile-command-map))
#+end_src

*** Hydra
#+begin_src emacs-lisp
(use-package hydra
  :ensure t)
#+end_src

*** Surround
#+begin_src emacs-lisp
(use-package emacs-surround
:straight (emacs-surround :type git :host github :repo "ganmacs/emacs-surround")
:bind ("C-q" . 'emacs-surround))
#+end_src
*** Multicursors
#+begin_src emacs-lisp
(use-package multiple-cursors
  :ensure t)
(use-package mc-extras
  :ensure t)
(use-package phi-search
  :ensure t)
#+end_src

*** Paredit
 #+begin_src emacs-lisp
 (use-package paredit
   :ensure t)
 #+end_src

*** God mode
#+begin_src emacs-lisp
(use-package god-mode
  :ensure t
  :config
    (add-hook 'prog-mode-hook 'god-local-mode)
    (add-hook 'text-mode-hook 'god-local-mode))
#+end_src

*** Rainbow brackets
#+begin_src emacs-lisp
(use-package rainbow-delimiters
  :ensure t
  :config
  (add-hook 'prog-mode-hook 'rainbow-delimiters-mode))
#+end_src

*** LSP
#+begin_src emacs-lisp
(use-package lsp-mode
  :ensure t)
#+end_src

*** Completion
#+begin_src emacs-lisp
(use-package company
  :ensure t
  :config
  (add-hook 'after-init-hook 'global-company-mode))
#+end_src

*** Smartparens
#+begin_src emacs-lisp
(use-package smartparens
  :ensure t
  :config
  (require 'smartparens-config)
  (add-hook 'prog-mode-hook 'smartparens-mode)
  (add-hook 'lisp-mode-hook 'smartparens-strict-mode))
#+end_src

*** Expand selection
#+begin_src emacs-lisp
(use-package expand-region
  :ensure t)
#+end_src

*** Theme
#+BEGIN_SRC emacs-lisp
(use-package base16-theme
    :ensure t
    :init
    (setq custom-safe-themes t)
    (load-theme 'base16-gruvbox-dark-hard)
    (add-to-list 'default-frame-alist '(background-color . "#1d1d1d"))
    (add-to-list 'default-frame-alist '(foreground-color . "#fbf1c7"))
    (set-face-background 'fringe nil)
    (fringe-mode 32)
    (set-face-foreground 'org-block nil))

#+end_src



** Languages

*** Web 
#+begin_src emacs-lisp
(use-package web-mode
  :ensure t)
#+end_src
*** Javascript/Typescript
 #+begin_src emacs-lisp
 (use-package tide
   :after (tide company)
   :ensure t
   :config
   (defun setup-tide-mode ()
     "Setup function for tide."

     (interactive)
     (tide-setup)
     (flycheck-mode +1)
     (setq flycheck-check-syntax-automatically '(save mode-enabled))
     (eldoc-mode +1)
     (tide-hl-identifier-mode +1)
     (company-mode +1))

   (setq company-tooltip-align-annotations t)

   (add-hook 'js-mode-hook #'setup-tide-mode))
 #+end_src

* Custom
** Config vars
- No shift-selection for arrow motions
#+BEGIN_SRC emacs-lisp
(setq shift-select-mode nil)
#+END_SRC
** Vars for all gruvbox colors
#+BEGIN_SRC emacs-lisp
    (defvar gruv-red "#cc241d")
    (defvar gruv-green "#98971a")
    (defvar gruv-yellow "#d79921")
    (defvar gruv-blue "#458588")
    (defvar gruv-purple "#b16286")
    (defvar gruv-aqua "#689d6a")
    (defvar gruv-orange "#d65d0e")

    (defvar gruv-dark-red "#9d0006")
    (defvar gruv-dark-green "#79740e")
    (defvar gruv-dark-yellow "#b57614")
    (defvar gruv-dark-blue "#076678")
    (defvar gruv-dark-purple "#8f3f71")
    (defvar gruv-dark-aqua "#427b58")
    (defvar gruv-dark-orange "#af3a03")

    (defvar gruv-light-red "#fb4934")
    (defvar gruv-light-green "#b8bb26")
    (defvar gruv-light-yellow "#fabd2f")
    (defvar gruv-light-blue "#83a598")
    (defvar gruv-light-purple "#d3869b")
    (defvar gruv-light-aqua "#8ec07c")
    (defvar gruv-light-orange "#fe8019")
#+END_SRC
** Functions
 #+BEGIN_SRC emacs-lisp

   (setq ivy-use-virtual-buffers t)
   (setq ivy-count-format "(%d/%d) ")
 #+end_src
   ;; Custom funs
  
 #+begin_src emacs-lisp
 (defun newline-below ()
     (interactive)
     (save-excursion
       (call-interactively 'move-end-of-line)
       (newline)))
 #+end_src



#+begin_src emacs-lisp
   (defun newline-above ()
     (interactive)
       (save-excursion
       (call-interactively 'move-beginning-of-line)
       (newline)))
#+end_src
  

   #+begin_src emacs-lisp
   (defun insert-above ()
	  (interactive)
	  (progn
	    (call-interactively 'move-beginning-of-line)
	    (newline)
	    (call-interactively 'previous-line)
	    (call-interactively 'god-local-mode 0)))
   #+end_src

   #+begin_src emacs-lisp
   (defun insert-below ()
     (interactive)
     (progn
       (call-interactively 'move-end-of-line)
       (newline)
       (call-interactively 'god-local-mode 0)))
   #+end_src

   #+begin_src emacs-lisp
   (defun wrath ()
     "cut the current region and leave god mode; cf 'c' in vim"
     (interactive)
     (if
	 (use-region-p)
	  (progn
	    (call-interactively 'kill-region)
	    (call-interactively 'god-local-mode 0))
       (call-interactively 'god-local-mode 0)))
   #+end_src

   #+begin_src emacs-lisp
   (defun mark-toggle ()
     "toggle the mark; cf visual mode in vim"
     (interactive)
     (if (region-active-p)
	 (deactivate-mark)
       (call-interactively 'set-mark-command)))
   #+end_src

   #+begin_src emacs-lisp
   (defun comment-toggle ()
     "toggle comment status on one or more lines."
     (interactive)
     (if (use-region-p)
	 (call-interactively 'comment-line)
       (if (= (line-beginning-position) (line-end-position))
	   (call-interactively 'comment-dwim)
	   (comment-or-uncomment-region (line-beginning-position) (line-end-position)))))
   #+end_src

   #+begin_src emacs-lisp
   (defun line-beginning-smart ()
     "go to the beginning of the line; if already there, go to the first nonwhitespace character."
     (interactive)
     (if (= 0 (current-column))
	 (call-interactively 'back-to-indentation)
       (call-interactively 'move-beginning-of-line)))
   #+end_src

   #+begin_src emacs-lisp
   (defun kill-region-smart ()
     (interactive)
     (if (use-region-p)
	 (call-interactively 'kill-region)
       (call-interactively 'delete-char)))
   #+end_src

   #+begin_src emacs-lisp
   (defun select-line ()
   "select the current line"
     (interactive)
     (if (use-region-p)
	 (call-interactively 'move-end-of-line)
       (progn
	 (call-interactively 'move-beginning-of-line)
	 (call-interactively 'set-mark-command)
	 (call-interactively 'move-end-of-line))))
   #+end_src

* Keybindings
#+BEGIN_SRC emacs-lisp

(global-set-key (kbd "<escape>") (lambda () (interactive) (god-local-mode 1)))

;; Emacs-like navigation for god-mode
(global-set-key (kbd "C-f") #'forward-word)
(global-set-key (kbd "M-f") #'forward-char)
(global-set-key (kbd "C-b") #'backward-word)
(global-set-key (kbd "M-b") #'backward-char)
(global-set-key (kbd "C-e") #'end-of-line)
(global-set-key (kbd "C-n") #'next-logical-line)
(global-set-key (kbd "C-p") #'previous-logical-line)
(global-set-key [remap set-mark-command] #'mark-toggle)

(global-set-key (kbd "C-k") #'select-line)

;; vim-like navigation for god-mode
;; (define-key god-local-mode-map (kbd "h") #'backward-word)
;; (define-key god-local-mode-map (kbd "H") #'backward-char)
;; (define-key god-local-mode-map (kbd "j") #'next-line)
;; (define-key god-local-mode-map (kbd "k") #'previous-line)
;; (define-key god-local-mode-map (kbd "l") #'forward-word)
;; (define-key god-local-mode-map (kbd "L") #'forward-char)
(define-key god-local-mode-map (kbd "i") #'wrath)
(define-key god-local-mode-map (kbd "C-S-i") (lambda () (interactive) (god-local-mode 0)))
;; (define-key god-local-mode-map (kbd "m") #'mark-toggle)
;; (define-key god-local-mode-map (kbd "o") #'insert-below)
;; (define-key god-local-mode-map (kbd "C-S-o") #'insert-above)

(define-key god-local-mode-map (kbd "[") #'newline-above)
(define-key god-local-mode-map (kbd "]") #'newline-below)
(global-set-key (kbd "C-a") #'line-beginning-smart)
(global-set-key (kbd "C-d") #'kill-region-smart)
(define-key paredit-mode-map (kbd "C-d") #'smart-kill-region)
(define-key paredit-mode-map [remap kill-region] #'paredit-kill-region)
;; (global-set-key (kbd "M-SPC")
;; 		(defhydra utility-hydra (:pre (god-local-mode 0)
;; 				:post (god-local-mode 1))
;; 		  "Utility Hydra"
;; 		  ("h" windmove-left "window left")
;; 		  ("j" windmove-down "window down")
;; 		  ("k" windmove-up "window up")
;; 		  ("l" windmove-right "window right")
;; 		  ("H" split-window-horizontally "split window horizontally")
;; 		  ("J" split-window-vertically "split window vertically")
;; 		  ("d" delete-window "delete window")
;; 		  ("r" ranger "ranger" :color blue)
;; 		  ("C" (find-file user-init-file) "Edit init file" :color blue)
;; 		  ("Q" kill-emacs "kill emacs")
;; 		  ("<escape>" nil "quit")
;; 		  ))
(global-set-key (kbd "M-SPC")
		(defhydra utility-hydra (:pre (god-local-mode 0)
				:post (god-local-mode 1))
		  "Utility Hydra"
		  ("b" windmove-left "window left")
		  ("n" windmove-down "window down")
		  ("p" windmove-up "window up")
		  ("f" windmove-right "window right")
		  ("F" split-window-horizontally "split window horizontally")
		  ("N" split-window-vertically "split window vertically")
		  ("d" delete-window "delete window")
		  ("r" ranger "ranger" :color blue)
		  ;; ("g" magit-status "magit status" :color blue)
		  ("!" eshell "eshell" :color blue)
		  ("C" (find-file "~/.emacs.d/configuration.org") "Edit init file" :color blue)
		  ("Q" kill-emacs "kill emacs")
		  ("<escape>" nil "quit")))



(defhydra barf-hydra ()
	 ("f" sp-forward-barf-sexp "barf forward" :color blue)
	 ("b" sp-backward-barf-sexp "barf backward" :color blue))


(defhydra slurp-hydra ()
	 ("f" sp-forward-slurp-sexp "slurp forward" :color blue)
	 ("b" sp-backward-slurp-sexp "slurp backward" :color blue))


(defhydra sp-hydra (:pre (god-local-mode 0)
			 :post (god-local-mode 1))
  ("b" barf-hydra/body "barf" :color blue)
  ("s" slurp-hydra/body "slurp" :color blue)
  ("m" sp-mark-sexp "mark sexp" :color blue))


(define-key smartparens-mode-map (kbd "C-c n") #'sp-hydra/body)

(global-set-key (kbd "C-w") #'er/expand-region)
(global-set-key (kbd "C-y") #'kill-ring-save)
(global-set-key (kbd "C-v") #'yank)
(global-set-key (kbd "C-;") #'avy-goto-char-timer)
(global-set-key (kbd "C-:") #'avy-goto-line)

;; Better commenting function
(global-set-key (kbd "C-x C-;") #'comment-toggle)

;; Cursors
(blink-cursor-mode 0)
(setq-default cursor-type 'bar)
(add-hook 'window-setup-hook (lambda () (set-cursor-color gruv-light-yellow)))
(defun god-update-cursor ()
  (setq cursor-type (if (or god-local-mode buffer-read-only)
                        'box
                      'bar)))

(set-cursor-color gruv-light-yellow)
(add-hook 'activate-mark-hook (lambda () (set-cursor-color gruv-red)))
(add-hook 'deactivate-mark-hook (lambda () (set-cursor-color gruv-light-yellow)))

(add-hook 'god-mode-enabled-hook 'god-update-cursor)
(add-hook 'god-mode-disabled-hook 'god-update-cursor)

;; open links in msedge
(setq browse-url-generic-program 
    "/mnt/c/Program Files (x86)/Microsoft/Edge/Application/msedge.exe" 
    browse-url-browser-function 'browse-url-generic)

#+END_SRC
